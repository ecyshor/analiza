services:
  eye:
    build:
      context: ./eye
    ports:
      - "8080:8080"
    depends_on:
      clickhouse:
        condition: service_healthy
      eye_flyway:
        condition: service_completed_successfully
    environment:
      - CLICKHOUSE_HOST=clickhouse
      - POSTGRES_HOST=postgres
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  clickhouse:
    image: docker.io/bitnami/clickhouse:23.3.1
#    user: "1001:1001" # Defined by the bitnami dockerfile https://github.com/bitnami/containers/blob/main/bitnami/clickhouse/23/debian-11/Dockerfile
    environment:
      - CLICKHOUSE_ADMIN_USER=eye_admin
      - CLICKHOUSE_ADMIN_PASSWORD=eye_super_duper_password
    ports:
      - '8123:8123'
      - '9000:9000'
    volumes:
      - ./eye/clickhouse/init:/docker-entrypoint-initdb.d
      - type: bind
        source: ${ANALIZA_DATA_DIR:-/data/analiza}/clickhouse/data
        target: /bitnami/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: [ "CMD-SHELL", "clickhouse client -u $${CLICKHOUSE_ADMIN_USER} --password $${CLICKHOUSE_ADMIN_PASSWORD} -q 'SELECT 1'" ]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '4'
          memory: 8G
  metabase:
    image: 'metabase-clickhouse'
    build: metabase
    container_name: 'metabase'
    ports:
      - '3002:3000'
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=metabase
      - MB_DB_PASS=metabase_super_password
      - MB_DB_HOST=postgres
    depends_on:
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.1'
          memory: 500M
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
  postgrest:
    image: postgrest/postgrest
    ports:
      - "3001:3000"
    command:
      - "postgrest"
      - "/config/postgrest.conf"
    depends_on:
      postgrest_flyway:
        condition: service_completed_successfully
    volumes:
      - type: bind
        source: $ANALIZA_POSTGREST_CONFIG
        target: /config/postgrest.conf
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  postgrest_flyway:
    image: flyway/flyway
    command: -url=jdbc:postgresql://postgres:5432/eye_admin -user=postgres -password=super_secret_password -connectRetries=60 migrate
    volumes:
      - ./postgrest/schema:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8081:8080"
    environment:
      API_URL: http://localhost:3001/
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  eye_flyway:
    image: flyway/flyway
    command: -url=jdbc:postgresql://postgres:5432/eye_admin -defaultSchema=eye -user=postgres -password=super_secret_password -connectRetries=60 migrate
    volumes:
      - ./eye/postgres/schema:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  postgres:
    image: bitnami/postgresql:15.2.0
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super_secret_password
      POSTGRES_DATABASE: postgres
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d/
      - type: bind
        source: ${ANALIZA_DATA_DIR:-/data/analiza}/postgres/data
        target: /bitnami/postgresql
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

